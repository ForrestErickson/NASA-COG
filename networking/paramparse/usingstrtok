#include <stdio.h>
#include <string.h>
#include <stdlib.h>

char udpbuffer[2048] = "Name. Test Name \n\
TimeStamp. 1680759024\n\
DryRun. TRUE\n\
Nonce. 123\n\
MaxRampUp. 10\n\
MaxRampDown. 10\n\
[[ StateName. WarmUp\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
[[ StateName. Cooldown\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
[[ StateName. EmergencyShutdown\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
[[ StateName. Operation\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
[ Phases.Offset. 0\n\
Phases.Fan.Speed. 0\n\
Phases.Fan.Flow. 0\n\
Phases.Preheat.Temp. 0\n\
Phases.Preheat.Current. 0\n\
Phases.Preheat.Ramp. 0\n\
Phases.Stack.Temp. 0\n\
Phases.Stack.Current. 0\n\
Phases.Stack.Ramp. 0\n\
";

char *gName = "";
char *gTimestamp = "";
int gDryRun = 1;
int gNonce = -1;
int gMaxRampUp = 1;
int gMaxRampDown = 2;
char *gWarmUp = NULL;
char *gCooldown = NULL;
char *gEmShutdown = NULL;
char *gOperation = NULL;

int main(int argc, char *argv[]) {
  char *ptrst = udpbuffer;
  char *ptren = NULL;;

  while (ptren = strchr(ptrst, '\n')) {
    if (strncasecmp(ptrst, "Name.", 5) == 0) {
      fprintf(stderr, "Name: ");
      ptrst += 5;
      *ptren++ = '\0';
      while (*ptrst == ' ') ptrst++;
      gName = ptrst;
      fprintf(stderr, "%s\n", gName);
      ptrst = ptren;
      continue;
    }
    if (strncasecmp(ptrst, "TimeStamp.", 10) == 0) {
      fprintf(stderr, "TS: ");
      ptrst += 10;
      *ptren++ = '\0';
      while (*ptrst == ' ') ptrst++;
      gTimestamp = ptrst;
      fprintf(stderr, "%s\n", gTimestamp);
      ptrst = ptren;
      continue;
    }
    if (strncasecmp(ptrst, "DryRun.", 7) == 0) {
      fprintf(stderr, "DR: ");
      ptrst += 7;
      *ptren++ = '\0';
      while (*ptrst == ' ') ptrst++;
      gDryRun = 1;
      if (strncasecmp(ptrst, "No", 2) == 0 ||
	  strncasecmp(ptrst, "False", 5) == 0 ||
	  *ptrst ==  '0')
	gDryRun = 0;
      fprintf(stderr, "%d\n", gDryRun);
      ptrst = ptren;
      continue;
    }
    if (strncasecmp(ptrst, "Nonce.", 6) == 0) {
      fprintf(stderr, "Nonce: ");
      ptrst += 6;
      *ptren++ = '\0';
      while (*ptrst == ' ') ptrst++;
      gNonce = atoi(ptrst);
      fprintf(stderr, "%d\n", gNonce);
      ptrst = ptren;
      continue;
    }
    if (strncasecmp(ptrst, "MaxRampUp.", 10) == 0) {
      fprintf(stderr, "Rampup: ");
      ptrst += 10;
      *ptren++ = '\0';
      while (*ptrst == ' ') ptrst++;
      gMaxRampUp = atoi(ptrst);
      fprintf(stderr, "%d\n", gMaxRampUp);
      ptrst = ptren;
      continue;
    }
    if (strncasecmp(ptrst, "MaxRampDown.", 12) == 0) {
      fprintf(stderr, "Rampdown: ");
      ptrst += 12;
      *ptren++ = '\0';
      while (*ptrst == ' ') ptrst++;
      gMaxRampDown = atoi(ptrst);
      fprintf(stderr, "%d\n", gMaxRampDown);
      ptrst = ptren;
      continue;
    }
    if (strncasecmp(ptrst, "[[ StateName.", 13) == 0) {
      fprintf(stderr, "State: ");
      ptrst += 13;
      *ptren++ = '\0';;
      while (*ptrst == ' ') ptrst++;
      if (strncasecmp (ptrst, "WarmUp", 6) == 0) gWarmUp = ptren;
      else if (strncasecmp (ptrst, "CoolDown", 8) == 0) gCooldown = ptren;
      else if (strncasecmp (ptrst, "EmergencyShutdown", 17) == 0) gEmShutdown =ptren;
      else if (strncasecmp (ptrst, "Operation", 9) == 0) gOperation = ptren;
      fprintf(stderr, "%s\n", ptrst);
      ptrst = ptren;
      ptren = strstr(ptrst, "[[ ");
      if (ptren) {
	*(--ptren) = '\0';
	ptrst = ptren + 1;
      } else {
	ptren = strrchr(ptrst, '\n');
	*ptren++ = '\0';
	break;
      }
    }
  }

  printf("Name is %s\n", gName);
  printf("Timestamp is %s\n", gTimestamp);
  printf("Dryrun is %s\n", gDryRun ? "True" : "False");
  printf("Nonce is %d\n", gNonce);
  printf("Max UP is %d\n", gMaxRampUp);
  printf("Max DOWN is %d\n", gMaxRampDown);
  printf("Warmup Script:\n%s\n----\n", gWarmUp);
  printf("Cooldown Script:\n%s\n----\n", gCooldown);
  printf("Emergency Script:\n%s\n----\n", gEmShutdown);
  printf("Operation Script:\n%s\n----\n", gOperation);
}
